"""Modify unique key on station sensors

Revision ID: 5a7ba47c4fc9
Revises: b71adebbb41e
Create Date: 2024-02-14 18:38:05.675031

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '5a7ba47c4fc9'
down_revision: Union[str, None] = 'b71adebbb41e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('stationsensorassignments', sa.Column('sensor_id', sqlmodel.sql.sqltypes.GUID(), nullable=False))
    op.drop_constraint('your_unique_constraint_name', 'stationsensorassignments', type_='unique')
    op.create_unique_constraint('sensor_station_position_unique_constraint', 'stationsensorassignments', ['sensor_position', 'station_id', 'sensor_id'])
    op.drop_constraint('stationsensorassignments_sensor_device_id_fkey', 'stationsensorassignments', type_='foreignkey')
    op.create_foreign_key(None, 'stationsensorassignments', 'sensor', ['sensor_id'], ['id'])
    op.drop_column('stationsensorassignments', 'sensor_device_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('stationsensorassignments', sa.Column('sensor_device_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'stationsensorassignments', type_='foreignkey')
    op.create_foreign_key('stationsensorassignments_sensor_device_id_fkey', 'stationsensorassignments', 'sensor', ['sensor_device_id'], ['id'])
    op.drop_constraint('sensor_station_position_unique_constraint', 'stationsensorassignments', type_='unique')
    op.create_unique_constraint('your_unique_constraint_name', 'stationsensorassignments', ['sensor_position', 'station_id', 'sensor_device_id'])
    op.drop_column('stationsensorassignments', 'sensor_id')
    # ### end Alembic commands ###
