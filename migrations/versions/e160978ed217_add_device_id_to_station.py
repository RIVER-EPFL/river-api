"""Add device id to station

Revision ID: e160978ed217
Revises: 4d5081c5ec9a
Create Date: 2024-02-08 14:03:27.534166

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e160978ed217'
down_revision: Union[str, None] = '4d5081c5ec9a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_sensordata_id', table_name='sensordata')
    op.drop_index('ix_sensordata_instrument_seq', table_name='sensordata')
    op.drop_index('ix_sensordata_iterator', table_name='sensordata')
    op.drop_index('ix_sensordata_river_moisture_count', table_name='sensordata')
    op.drop_index('ix_sensordata_station_id', table_name='sensordata')
    op.drop_index('ix_sensordata_temperature_1', table_name='sensordata')
    op.drop_index('ix_sensordata_temperature_2', table_name='sensordata')
    op.drop_index('ix_sensordata_temperature_3', table_name='sensordata')
    op.drop_index('ix_sensordata_time', table_name='sensordata')
    op.drop_table('sensordata')
    op.add_column('station', sa.Column('associated_astrocast_device', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('station', 'associated_astrocast_device')
    op.create_table('sensordata',
    sa.Column('instrument_seq', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('time_zone', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('temperature_1', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('temperature_2', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('temperature_3', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('river_moisture_count', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('shake', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_flat', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('iterator', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('station_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], name='sensordata_station_id_fkey'),
    sa.PrimaryKeyConstraint('iterator', name='sensordata_pkey'),
    sa.UniqueConstraint('id', name='sensordata_id_key')
    )
    op.create_index('ix_sensordata_time', 'sensordata', ['time'], unique=False)
    op.create_index('ix_sensordata_temperature_3', 'sensordata', ['temperature_3'], unique=False)
    op.create_index('ix_sensordata_temperature_2', 'sensordata', ['temperature_2'], unique=False)
    op.create_index('ix_sensordata_temperature_1', 'sensordata', ['temperature_1'], unique=False)
    op.create_index('ix_sensordata_station_id', 'sensordata', ['station_id'], unique=False)
    op.create_index('ix_sensordata_river_moisture_count', 'sensordata', ['river_moisture_count'], unique=False)
    op.create_index('ix_sensordata_iterator', 'sensordata', ['iterator'], unique=False)
    op.create_index('ix_sensordata_instrument_seq', 'sensordata', ['instrument_seq'], unique=False)
    op.create_index('ix_sensordata_id', 'sensordata', ['id'], unique=False)
    # ### end Alembic commands ###
