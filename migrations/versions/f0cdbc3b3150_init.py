"""init

Revision ID: f0cdbc3b3150
Revises:
Create Date: 2023-11-09 13:32:30.086105

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from geoalchemy2 import Geometry

# revision identifiers, used by Alembic.
revision: str = "f0cdbc3b3150"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_geospatial_table(
        "area",
        sa.Column(
            "geom",
            Geometry(
                geometry_type="POLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("iterator", sa.Integer(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.PrimaryKeyConstraint("iterator"),
        sa.UniqueConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_area_geom",
        "area",
        ["geom"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_index(op.f("ix_area_id"), "area", ["id"], unique=False)
    op.create_index(
        op.f("ix_area_iterator"), "area", ["iterator"], unique=False
    )
    op.create_index(op.f("ix_area_name"), "area", ["name"], unique=False)
    op.create_geospatial_table(
        "sensor",
        sa.Column(
            "geom",
            Geometry(
                geometry_type="POINT",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("iterator", sa.Integer(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("area_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["area_id"],
            ["area.id"],
        ),
        sa.PrimaryKeyConstraint("iterator"),
        sa.UniqueConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_sensor_geom",
        "sensor",
        ["geom"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_index(op.f("ix_sensor_id"), "sensor", ["id"], unique=False)
    op.create_index(
        op.f("ix_sensor_iterator"), "sensor", ["iterator"], unique=False
    )
    op.create_index(op.f("ix_sensor_name"), "sensor", ["name"], unique=False)
    op.create_table(
        "sensordata",
        sa.Column("iterator", sa.Integer(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("instrument_seq", sa.Integer(), nullable=False),
        sa.Column("time", sa.DateTime(), nullable=False),
        sa.Column("time_zone", sa.Integer(), nullable=True),
        sa.Column("temperature_1", sa.Float(), nullable=True),
        sa.Column("temperature_2", sa.Float(), nullable=True),
        sa.Column("temperature_3", sa.Float(), nullable=True),
        sa.Column("river_moisture_count", sa.Float(), nullable=True),
        sa.Column("shake", sa.Integer(), nullable=True),
        sa.Column("error_flat", sa.Integer(), nullable=True),
        sa.Column("sensor_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["sensor_id"],
            ["sensor.id"],
        ),
        sa.PrimaryKeyConstraint("iterator"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(
        op.f("ix_sensordata_id"), "sensordata", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_sensordata_instrument_seq"),
        "sensordata",
        ["instrument_seq"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sensordata_iterator"),
        "sensordata",
        ["iterator"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sensordata_sensor_id"),
        "sensordata",
        ["sensor_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sensordata_river_moisture_count"),
        "sensordata",
        ["river_moisture_count"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sensordata_temperature_1"),
        "sensordata",
        ["temperature_1"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sensordata_temperature_2"),
        "sensordata",
        ["temperature_2"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sensordata_temperature_3"),
        "sensordata",
        ["temperature_3"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sensordata_time"), "sensordata", ["time"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_sensordata_time"), table_name="sensordata")
    op.drop_index(op.f("ix_sensordata_temperature_3"), table_name="sensordata")
    op.drop_index(op.f("ix_sensordata_temperature_2"), table_name="sensordata")
    op.drop_index(op.f("ix_sensordata_temperature_1"), table_name="sensordata")
    op.drop_index(
        op.f("ix_sensordata_river_moisture_count"), table_name="sensordata"
    )
    op.drop_index(op.f("ix_sensordata_sensor_id"), table_name="sensordata")
    op.drop_index(op.f("ix_sensordata_iterator"), table_name="sensordata")
    op.drop_index(
        op.f("ix_sensordata_instrument_seq"), table_name="sensordata"
    )
    op.drop_index(op.f("ix_sensordata_id"), table_name="sensordata")
    op.drop_table("sensordata")
    op.drop_index(op.f("ix_sensor_name"), table_name="sensor")
    op.drop_index(op.f("ix_sensor_iterator"), table_name="sensor")
    op.drop_index(op.f("ix_sensor_id"), table_name="sensor")
    op.drop_geospatial_index(
        "idx_sensor_geom",
        table_name="sensor",
        postgresql_using="gist",
        column_name="geom",
    )
    op.drop_geospatial_table("sensor")
    op.drop_index(op.f("ix_area_name"), table_name="area")
    op.drop_index(op.f("ix_area_iterator"), table_name="area")
    op.drop_index(op.f("ix_area_id"), table_name="area")
    op.drop_geospatial_index(
        "idx_area_geom",
        table_name="area",
        postgresql_using="gist",
        column_name="geom",
    )
    op.drop_geospatial_table("area")
    # ### end Alembic commands ###
