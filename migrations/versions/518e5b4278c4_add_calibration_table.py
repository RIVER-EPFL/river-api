"""Add calibration table

Revision ID: 518e5b4278c4
Revises: 06d7ff353efa
Create Date: 2024-02-16 15:28:49.356291

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '518e5b4278c4'
down_revision: Union[str, None] = '06d7ff353efa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sensorcalibration',
    sa.Column('parameter_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parameter_acronym', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parameter_unit', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parameter_db_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('serial_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('calibrated_on', sa.DateTime(), nullable=False),
    sa.Column('sensor_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('slope', sa.Float(), nullable=False),
    sa.Column('intercept', sa.Float(), nullable=False),
    sa.Column('min_range', sa.Float(), nullable=False),
    sa.Column('max_range', sa.Float(), nullable=False),
    sa.Column('iterator', sa.Integer(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], ),
    sa.PrimaryKeyConstraint('iterator'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_sensorcalibration_calibrated_on'), 'sensorcalibration', ['calibrated_on'], unique=False)
    op.create_index(op.f('ix_sensorcalibration_id'), 'sensorcalibration', ['id'], unique=False)
    op.create_index(op.f('ix_sensorcalibration_iterator'), 'sensorcalibration', ['iterator'], unique=False)
    op.drop_column('sensor', 'calibrated_on')
    op.drop_column('sensor', 'max_range')
    op.drop_column('sensor', 'slope')
    op.drop_column('sensor', 'min_range')
    op.drop_column('sensor', 'intercept')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('sensor', sa.Column('intercept', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('sensor', sa.Column('min_range', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('sensor', sa.Column('slope', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('sensor', sa.Column('max_range', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('sensor', sa.Column('calibrated_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_sensorcalibration_iterator'), table_name='sensorcalibration')
    op.drop_index(op.f('ix_sensorcalibration_id'), table_name='sensorcalibration')
    op.drop_index(op.f('ix_sensorcalibration_calibrated_on'), table_name='sensorcalibration')
    op.drop_table('sensorcalibration')
    # ### end Alembic commands ###
